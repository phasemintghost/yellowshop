from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, KeyboardButton, ReplyKeyboardMarkup
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher import FSMContext
from aiogram.utils.markdown import hbold
from aiogram.dispatcher.filters.state import State, StatesGroup
import pymysql.cursors
from datetime import datetime
from config import BOT_TOKEN, ADMIN_ID, OUTPUT_CHAT, DB_NAME, HOST, PORT, USER, PASSWORD, DEFAULT_PARSE_MODE

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())
dp.middleware.setup(LoggingMiddleware())


async def send_output(admin_answer, user_id, username, link_to_chat=None):
    if link_to_chat is not None:
        date = datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        text = f"üï† {hbold('–í—Ä–µ–º—è')} - {date}\n‚úâÔ∏è {hbold('–û—Ç–≤–µ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞')}: {admin_answer}\nüßü {hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')}: @{username} | {user_id}"
        await bot.send_message(chat_id=link_to_chat, text=text, parse_mode=DEFAULT_PARSE_MODE)


def connect(db_name=None):
    try:
        connection_ = pymysql.connect(
            host=HOST,
            port=PORT,
            user=USER,
            password=PASSWORD,
            database=db_name,
            cursorclass=pymysql.cursors.DictCursor
        )

        print("Connection Successful")
        return connection_
    except Exception as err:
        print("Connection was failed")
        print(err)


class States(StatesGroup):
    change_name = State()
    change_chat_link = State()
    change_support_link = State()
    change_info_channel_link = State()
    send_application = State()


connection = connect(DB_NAME)
cursor = connection.cursor()


def get_admin_keyboard(add_back_button: bool = False):
    keyboard_ = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [
            InlineKeyboardButton(text=f"‚¨ú –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞", callback_data="change_name"),
            InlineKeyboardButton(text=f"‚¨ú –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç", callback_data="change_chat_link")
        ],
        [
            InlineKeyboardButton(text=f"‚¨ú –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–¥–¥–µ–∂–∫—É", callback_data="change_support_link"),
            InlineKeyboardButton(text=f"‚¨ú –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ñ–æ-–∫–∞–Ω–∞–ª", callback_data="change_info_channel_link")
        ],
    ])

    if add_back_button:
        keyboard_.add(InlineKeyboardButton(text=f"üîô –ù–∞–∑–∞–¥", callback_data="back"))

    return keyboard_

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    if cursor.execute(f"SELECT * FROM `users` WHERE user_id = {message.from_user.id};") == 0:
        cursor.execute(f"INSERT INTO `users`(user_id, username, already_send) VALUES (%s, %s, %s);",
                       (message.from_user.id, message.from_user.username, False))
        cursor.execute(f"SELECT * FROM `project` WHERE creator_id={ADMIN_ID}")
        project_data = dict(cursor.fetchone())
        cursor.execute(
            f"UPDATE `project` SET total_users = {project_data['total_users'] + 1} WHERE creator_id={ADMIN_ID}")
        connection.commit()

    cursor.execute(f"SELECT * FROM `project` WHERE creator_id={ADMIN_ID}")
    project_data = dict(cursor.fetchone())

    if message.from_user.id != ADMIN_ID:
        keyboard_user = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, keyboard=[
            [KeyboardButton("–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")]
        ])
        await message.reply(
            f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ {hbold(project_data['project_name'])}!!!\n\n–î–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É {hbold('`–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É`')}\n\nCreator: @dkhodos",
            reply_markup=keyboard_user, parse_mode=DEFAULT_PARSE_MODE)
    else:
        keyboard_user = ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, keyboard=[
            [KeyboardButton("–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")]
        ])
        await message.reply(f"{hbold('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!!!')}\n\nCreator: @dkhodos", reply_markup=keyboard_user, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(text="–ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É")
async def send_application(message: types.Message):
    cursor.execute(f"SELECT * FROM `users` WHERE user_id = {message.from_user.id}")
    user = dict(cursor.fetchone())
    if user["already_send"]:
        await message.reply(text=f"‚õî {hbold('–í—ã —É–∂–µ –ø–æ–¥–∞–≤–∞–ª–∏ –∑–∞—è–≤–∫—É.')}", parse_mode=DEFAULT_PARSE_MODE)
    else:
        text = f"–ù–∞–ø–∏—à–∏—Ç–µ:\n\n{hbold('1.–°—Å—ã–ª–∫—É –Ω–∞ —Ñ–æ—Ä—É–º')}\n{hbold('2.–û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã')}\n{hbold('3.–ö–æ–ª-–≤–æ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ —É–¥–µ–ª—è—Ç—å —Ä–∞–±–æ—Ç–µ')}"
        await message.reply(text=text, parse_mode=DEFAULT_PARSE_MODE)
        await States.send_application.set()


@dp.message_handler(text="–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É")
async def show_statistics(message: types.Message):
    cursor.execute(f"SELECT * FROM `project` WHERE creator_id = {message.from_user.id}")
    project_data = dict(cursor.fetchone())

    text = f"üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ {hbold(project_data['project_name'])}:\n\nüßü {hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}: {project_data['total_users']}\n‚úÖ {hbold('–ü—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}: {project_data['accepted_users']}\n‚è∞ {hbold('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')}: {project_data['pending_users']}\n‚ùå {hbold('–ù–µ –ø—Ä–∏–Ω—è—Ç—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')}: {project_data['declined_users']}\n"
    await message.reply(text=text, parse_mode=DEFAULT_PARSE_MODE)


@dp.message_handler(state=States.send_application)
async def send_application_state(message: types.Message, state: FSMContext):
    await state.update_data(user_answer=message.text)
    data = await state.get_data()
    user_answer = data["user_answer"]
    cursor.execute(f"UPDATE `users` SET already_send = True WHERE user_id={message.from_user.id}")
    connection.commit()
    cursor.execute(f"SELECT * FROM `project` WHERE creator_id={ADMIN_ID}")
    project_data = dict(cursor.fetchone())
    cursor.execute(
        f"UPDATE `project` SET pending_users = {project_data['pending_users'] + 1} WHERE creator_id={ADMIN_ID}")
    connection.commit()
    await message.reply(text=f"‚è∞ {hbold('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.')}", parse_mode=DEFAULT_PARSE_MODE)
    text = f"üîî {hbold('–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!')} @{message.from_user.username} | {hbold(message.from_user.id)}\n\n{hbold('–¢–µ–∫—Å—Ç')}:\n{user_answer}"
    keyboard_admin = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
        [
            InlineKeyboardButton(f"‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_application_{message.from_user.id}"),
            InlineKeyboardButton(f"‚ùå –û—Ç–∫–∞–∑–∞—Ç—å", callback_data=f"decline_application_{message.from_user.id}")
        ]
    ])
    await bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=keyboard_admin, parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.callback_query_handler(text_contains="accept_application")
async def accept_applcation(callback_data: types.CallbackQuery):
    _, _, user_id = callback_data.data.split("_")

    cursor.execute(f"SELECT * FROM `project` WHERE creator_id = {ADMIN_ID};")
    project_data = dict(cursor.fetchone())
    keywords = {
        "chat_link": f"üí´ –ß–∞—Ç",
        "support_link": f"üì± –°–∞–ø–ø–æ—Ä—Ç",
        "info_channel_link": f"üì∞ –ò–Ω—Ñ–æ-–ö–∞–Ω–∞–ª",
    }
    keyboard_result = InlineKeyboardMarkup(row_width=1, inline_keyboard=[
        [InlineKeyboardButton(text=keywords[key], url=project_data[key])] for key in project_data if
        project_data[key] is not None if "link" in key
    ])
    cursor.execute(
        f"UPDATE `project` SET pending_users = {project_data['pending_users'] - 1} WHERE creator_id = {ADMIN_ID}")
    cursor.execute(
        f"UPDATE `project` SET accepted_users = {project_data['accepted_users'] + 1} WHERE creator_id = {ADMIN_ID}")
    connection.commit()
    await bot.send_message(chat_id=user_id, text=f"üåü {hbold('–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!')}",
                           reply_markup=keyboard_result, parse_mode=DEFAULT_PARSE_MODE)
    await callback_data.message.delete()

    cursor.execute(f"SELECT * FROM `users` WHERE user_id = {user_id}")
    user_data = dict(cursor.fetchone())
    await send_output(f"‚úîÔ∏è {hbold('–ü—Ä–∏–Ω—è—Ç–æ')}", user_id, user_data["username"], OUTPUT_CHAT)


@dp.callback_query_handler(text_contains="decline_application")
async def decline_application(callback_data: types.CallbackQuery):
    _, _, user_id = callback_data.data.split("_")
    cursor.execute(f"SELECT * FROM `project` WHERE creator_id = {ADMIN_ID};")
    project_data = dict(cursor.fetchone())
    cursor.execute(
        f"UPDATE `project` SET pending_users = {project_data['pending_users'] - 1} WHERE creator_id = {ADMIN_ID}")
    cursor.execute(
        f"UPDATE `project` SET declined_users = {project_data['declined_users'] + 1} WHERE creator_id = {ADMIN_ID}")
    connection.commit()
    await bot.send_message(chat_id=user_id, text="‚õî –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞", parse_mode=DEFAULT_PARSE_MODE)
    await callback_data.message.delete()

    cursor.execute(f"SELECT * FROM `users` WHERE user_id = {user_id}")
    user_data = dict(cursor.fetchone())
    await send_output(f"‚õî {hbold('–û—Ç–∫–∑–∞–Ω–æ')}", user_id, user_data["username"], OUTPUT_CHAT)


@dp.message_handler(commands=["settings"])
async def settings(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.reply(f"‚õî {hbold('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞')}")
    else:
        if cursor.execute(f"SELECT * FROM `project` WHERE creator_id = {message.from_user.id};") == 0:
            await message.reply(text=f"üí§ {hbold('–ò–Ω–∏—Ü–∏–ª–∏–∑–∏—Ä—É—é –ø—Ä–æ–µ–∫—Ç')}", parse_mode=DEFAULT_PARSE_MODE)
            cursor.execute(
                "INSERT INTO `project`(creator_id, total_users, pending_users, declined_users, accepted_users) VALUES (%s, %s, %s, %s, %s);",
                (message.from_user.id, 0, 0, 0, 0))
            connection.commit()
        cursor.execute(f"SELECT * FROM `project` WHERE creator_id = {message.from_user.id};")
        project = dict(cursor.fetchone())
        text = f"üíª {hbold('–ù–∞—Å—Ç—Ä–æ–π–∫–∏')}:\n\n‚¨ú {hbold('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞')}: " \
               f"{project['project_name'] if project['project_name'] is not None else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n" \
               f"‚¨ú {hbold('–°—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç')}: {project['chat_link'] if project['chat_link'] is not None else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n" \
               f"‚¨ú {hbold('–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É')}: {project['support_link'] if project['support_link'] is not None else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n" \
               f"‚¨ú {hbold('–°—Å—ã–ª–∫–∞ –Ω–∞ –∏–Ω—Ñ–æ-–∫–∞–Ω–∞–ª')}: {project['info_channel_link'] if project['info_channel_link'] is not None else '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}\n"

        await message.reply(text=text, reply_markup=get_admin_keyboard(), parse_mode=DEFAULT_PARSE_MODE)


@dp.callback_query_handler(text="change_name")
async def change_name(callback_data: types.CallbackQuery):
    await callback_data.message.edit_text(f"‚¨ú {hbold('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')}:", parse_mode=DEFAULT_PARSE_MODE)

    await States.change_name.set()


@dp.message_handler(state=States.change_name)
async def change_name_state(message: types.Message, state: FSMContext):
    await state.update_data(new_name=message.text)
    data = await state.get_data()
    new_name = data["new_name"]

    cursor.execute(f"UPDATE `project` SET project_name = '{new_name}' WHERE creator_id = {message.from_user.id};")
    # cursor.execute(
    connection.commit()
    text = f"‚úÖ {hbold('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}: {new_name}"
    await message.reply(text=text, reply_markup=get_admin_keyboard(True), parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.callback_query_handler(text="change_chat_link")
async def change_chat_link(callback_data: types.CallbackQuery):
    await callback_data.message.edit_text(f"‚¨ú {hbold('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç')}:", parse_mode=DEFAULT_PARSE_MODE)

    await States.change_chat_link.set()


@dp.message_handler(state=States.change_chat_link)
async def change_chat_link_state(message: types.Message, state: FSMContext):
    await state.update_data(new_chat_link=message.text)
    data = await state.get_data()
    new_chat_link = data["new_chat_link"]

    cursor.execute(f"UPDATE `project` SET chat_link = '{new_chat_link}' WHERE creator_id = {message.from_user.id};")
    connection.commit()
    text = f"‚úÖ {hbold('–ù–æ–≤–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ —á–∞—Ç –±—ã–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}: {new_chat_link}"
    await message.reply(text=text, reply_markup=get_admin_keyboard(True), parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()




@dp.message_handler(state=States.change_support_link)
async def change_name_state(message: types.Message, state: FSMContext):
    await state.update_data(new_support_link=message.text)
    data = await state.get_data()
    new_support_link = data["new_support_link"]

    cursor.execute(
        f"UPDATE `project` SET support_link = '{new_support_link}' WHERE creator_id = {message.from_user.id};")
    connection.commit()
    text = f"‚úÖ {hbold('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}: {new_support_link}"
    await message.reply(text=text, reply_markup=get_admin_keyboard(True), parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()


@dp.callback_query_handler(text="change_info_channel_link")
async def change_name(callback_data: types.CallbackQuery):
    await callback_data.message.edit_text(f"‚¨ú {hbold('–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –∏–Ω—Ñ–æ-–∫–∞–Ω–∞–ª')}:", parse_mode=DEFAULT_PARSE_MODE)

    await States.change_info_channel_link.set()


@dp.message_handler(state=States.change_info_channel_link)
async def change_name_state(message: types.Message, state: FSMContext):
    await state.update_data(new_info_channel_link=message.text)
    data = await state.get_data()
    new_info_channel_link = data["new_info_channel_link"]

    cursor.execute(
        f"UPDATE `project` SET info_channel_link = '{new_info_channel_link}' WHERE creator_id = {message.from_user.id};")
    connection.commit()
    text = f"‚úÖ {hbold('–ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –±—ã–ª–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')}: {new_info_channel_link}"
    await message.reply(text=text, reply_markup=get_admin_keyboard(True), parse_mode=DEFAULT_PARSE_MODE)
    await state.finish()



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
